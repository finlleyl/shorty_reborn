// Code generated by MockGen. DO NOT EDIT.
// Source: internal/database/url_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/database/url_repository.go -destination=internal/service/servicetest/url_repo_mock.go -package=servicetest
//

// Package servicetest is a generated GoMock package.
package servicetest

import (
	context "context"
	reflect "reflect"

	database "github.com/finlleyl/shorty_reborn/internal/database"
	gomock "go.uber.org/mock/gomock"
)

// MockURLRepository is a mock of URLRepository interface.
type MockURLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockURLRepositoryMockRecorder
	isgomock struct{}
}

// MockURLRepositoryMockRecorder is the mock recorder for MockURLRepository.
type MockURLRepositoryMockRecorder struct {
	mock *MockURLRepository
}

// NewMockURLRepository creates a new mock instance.
func NewMockURLRepository(ctrl *gomock.Controller) *MockURLRepository {
	mock := &MockURLRepository{ctrl: ctrl}
	mock.recorder = &MockURLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLRepository) EXPECT() *MockURLRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockURLRepository) Delete(ctx context.Context, alias string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, alias)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockURLRepositoryMockRecorder) Delete(ctx, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockURLRepository)(nil).Delete), ctx, alias)
}

// Exists mocks base method.
func (m *MockURLRepository) Exists(ctx context.Context, alias string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, alias)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockURLRepositoryMockRecorder) Exists(ctx, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockURLRepository)(nil).Exists), ctx, alias)
}

// Get mocks base method.
func (m *MockURLRepository) Get(ctx context.Context, alias string) (*database.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, alias)
	ret0, _ := ret[0].(*database.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockURLRepositoryMockRecorder) Get(ctx, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockURLRepository)(nil).Get), ctx, alias)
}

// Save mocks base method.
func (m *MockURLRepository) Save(ctx context.Context, alias, url string) (*database.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, alias, url)
	ret0, _ := ret[0].(*database.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockURLRepositoryMockRecorder) Save(ctx, alias, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockURLRepository)(nil).Save), ctx, alias, url)
}
